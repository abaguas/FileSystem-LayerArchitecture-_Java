package pt.tecnico.mydrive.domain;

class MyDrive {
  int counter;
}

class Session {
  long token;
  DateTime timestamp;
}

class User {
  String username;
  String password;
  String name;
}

class Permission {
  boolean read;
  boolean write;
  boolean execute;
  boolean eliminate;
}

class File{
  String name;
  int id;
  DateTime lastChange;
}

class FileWithContent extends File {
  String content;
}

class Directory extends File;

class PlainFile extends FileWithContent;

class Link extends FileWithContent;

class App extends FileWithContent;

class RootUser extends User;

relation DomainRootHasMyDriveApplication {
  .pt.ist.fenixframework.DomainRoot playsRole root {
    multiplicity 0..1;
  }
  MyDrive playsRole myDrive {
    multiplicity 0..1;
  }
}

relation MyDriveHasSessions {
  MyDrive playsRole md {
    multiplicity 1;
  }
  Session playsRole session {
    multiplicity 0..*;
  }
}

relation MyDriveContainsRootDirectory{
  MyDrive playsRole mydrive {
    multiplicity 1;
  }
  Directory playsRole rootDirectory {
    multiplicity 1;
  }
}

relation FileHasOwner{
  File playsRole;
  User playsRole owner {
    multiplicity 1;  
  }
}

relation MyDriveContainsUsers{
  MyDrive playsRole myDrive {
    multiplicity 1;
  }
  User playsRole users {
    multiplicity 1..*;
  }
}

relation UserHasMainDirectory{
  User playsRole user {
    multiplicity 1;
  }
  Directory playsRole mainDirectory {
    multiplicity 1;
  }
}

relation DirectoryHasFiles {
  Directory playsRole directory {
    multiplicity 1;
  }
  File playsRole files {
    multiplicity 0..*;
  }
}

relation DirectoryhasSelfDirectory{
  Directory playsRole;
  Directory playsRole selfDirectory{
   multiplicity 1;
  }
}

relation DirectoryhasFatherDirectory{
  Directory playsRole;
  Directory playsRole fatherDirectory{
   multiplicity 1;
  }
}

relation UserhasOwnPermissionMask{
  User playsRole;
  Permission playsRole ownPermission{
   multiplicity 1;
  }
}


relation UserhasOthersPermissionMask{
  User playsRole;
  Permission playsRole othersPermission{
   multiplicity 1;
  }
}


relation FilehasUserPermission{
  File playsRole;
  Permission playsRole userPermission{
   multiplicity 1;
  }
}

relation FilehasOthersPermission{
  File playsRole;
  Permission playsRole othersPermission{
   multiplicity 1;
  }
}


relation MyDrivehasRootUser{
  MyDrive playsRole;
  RootUser playsRole rootUser{
   multiplicity 1;
  }
}

relation SessionhasCurrentDirectory{
  Session playsRole;
  Directory playsRole currentDir{
   multiplicity 1;
  }
}

relation SessionhasCurrentUser{
  Session playsRole session{
    multiplicity 1;
  }
  User playsRole currentUser{
   multiplicity 1;
  }
}
